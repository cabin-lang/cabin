let This = group {};

#[suppress<Warning.SingleVariantEither>]
let Nothing = either {
	nothing
};

let Optional = oneof<Data> {
	Data,
	Nothing
};

let Text = group {};

let Anything = group {

	#[builtin<"Anything.type">]
	type = action(this: Anything): Group,

	#[builtin<"Anything.to_string">]
	to_text = action(this: Anything): Text
};

let Object = group {};

let AnythingExtension = extend<T: Anything> T tobe Anything {

	#[builtin<"Anything.to_string">]
	to_text = action(this: Anything): Text
};

let Group = group {
	fields: Anything,
};

let Parameter = group {
	name: Text,
	type: Anything
};

let OneOf = group {};

let Function = group {
	parameters: Anything,
	return_type: Anything,
	compile_time_parameters: Anything,
	tags: Anything,
	this_object: Anything,
};

let system_side_effects = new Object {};

let RuntimeTag = group {
	reason: Text
};

let runtime = action<reason: Text>: RuntimeTag {
	runtime is new RuntimeTag {
		reason = reason	
	};
};

let Field = group {
	name: Text,
	value: Anything,
};

let List = group {};

let Either = group {
	variants: List
};

let Boolean = either {
	true,
	false
};

# The tag for a built-in function. Functions that are built into the Cabin compiler and run with native code are marked with this, usually
# via the `builtin<>` function.
let BuiltinTag = group {
	internal_name: Text
};

let builtin = action<name: Text>: BuiltinTag {
	builtin is new BuiltinTag {
		internal_name = name
	};
};

let Number = group {
	#[builtin<"Number.plus">]
	plus = action(this: Number, other: Number): Number,

	#[builtin<"Number.minus">]
	minus = action(this: Number, other: Number): Number
};

let Error = group {
	message: Text
};

let Attempted = oneof<Data> {
	Data,
	Error	
};

let ignorable = new Object {};

let TerminalPrintOptions = group {
	newline = Boolean.true
};

let TerminalInputOptions = group {
	prompt = ""
};

let system = new Object {

	terminal = new Object {

		#[builtin<"terminal.print">, system_side_effects, runtime<"print() is meant for the user. Use debug() at compile-time, or use a run expression to print to the user.">] 
		print = action(object: Anything, options: TerminalPrintOptions),

		debug = action(object: Anything) {
			#[suppress<Warning.RuntimeFunctionCall>]
			system.terminal.print(object);
		},

		#[builtin<"terminal.input">, system_side_effects, runtime<"Taking input at compile-time can cause varying outputs.">] 
		input = action(options: TerminalInputOptions): Text,
	},
};

let Map = group {
	get = action(key: Anything) {},
	set = action(key: Anything, value: Anything) {}
};

let Warning = either {
	# The warning that triggers when an either is created that has zero variants.
	EmptyEither,

	# The warning that triggers when an either is created that has only one variant.
	SingleVariantEither,

	# The warning that triggers when a runtime-preferred function is called at compile-time.
	RuntimeFunctionCall,
};

let WarningSuppressor = group {
	warning: Warning
};

# Suppresses a warning applied to a value.
let suppress = action<warning: Warning> {
	suppress is new WarningSuppressor {
		warning = warning
	};
};
