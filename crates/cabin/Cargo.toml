[package]
name = "cabin-language"
version = "0.0.1"
edition = "2021"
repository = "https://github.com/cabin-lang/cabin"
license = "GPL-3.0"
description = "A dead simple, highly performant, and extremely safe programming language."
readme = "README.md"
keywords = [
	"cabin",
	"cabin-language",
	"programming-language",
	"language",
	"compiler",
]
categories = ["command-line-utilities", "compilers"]

[[bin]]
name = "cabin"
path = "src/main.rs"

[lib]
name = "cabin"
path = "src/lib.rs"

[dependencies]
ambassador = "0.3.6" # For implementing a trait by delegating the methods to one of a structs fields
anyhow = "1.0.81" # For convenient error handling and propogating with ?
clap = { version = "4.5.4", features = [
	"derive", # For derives like `Parser` that generated parseable structs from the command line
] } # For parsing command-line arguments
colored = "2.1.0" # For printing colored and formatted text to the terminal
convert_case = "0.6.0" # For changing the case of words between kebab-case and snake_case and camelCase etc., used for the lexer to pretty-print token names in errors
enum_dispatch = "0.3.13" # For calling trait methods on enums when every variant has a subtype that implements the trait
phf = { version = "0.11.2", features = [
	"macros", # For the `phf_map!` macro to generate the constant hashmap
] } # For creating constant hashmaps, used to store the built-in functions and their information.
regex-macro = "0.2.0" # For generating constant regular expressions, used by the tokenizer to identify token types
strum = "0.26.2" # For using functionality generated by strum_macros on enums, such as iterating over enum variants or getting the number of enum variants
strum_macros = "0.26.2" # For generating helper methods on enums such as `iter()` and `count()` for the variants
toml_edit = "0.22.12" # For reading and editing TOML documents, used to automatically configure the cabin project configuration file (./cabin.toml in a project)
unindent = "0.2.3" # For unindenting the leading code whitespace in multiline strings
walkdir = "2.5.0" # For iterating over all files in a directory and all of it's subdirectories; Used by the formatter to format all Cabin files in a project
which = "6.0.1" # For checking if a command exists on the user's system; Used by the transpiler to check which C compiler the user has (if any)

[profile.release]
lto = true        # Enable link time optimizations, which produces better runtime performance at the expense of greater compile-time
codegen-units = 1 # Don't split into multiple code generation units; This will increase compile-time but maximize runtime performance
panic = "abort"   # Dump the program immediately on panic for faster runtime and smaller build size

# Cargo lints for strict production code
[lints.rust]
elided_lifetimes_in_paths = "warn"
keyword_idents = "warn"
let_underscore_drop = "warn"
meta_variable_misuse = "warn"
non_ascii_idents = "warn"
single_use_lifetimes = "warn"
unit_bindings = "warn"
unsafe_code = "forbid"
unstable_features = "forbid"
unused_crate_dependencies = "forbid"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"

# Clippy lints for strict production code
[lints.clippy]
allow_attributes = "warn"
assertions_on_result_states = "warn"
branches_sharing_code = "warn"
cargo_common_metadata = "warn"
case_sensitive_file_extension_comparisons = "warn"
clear_with_drain = "warn"
clone_on_ref_ptr = "warn"
collection_is_never_read = "warn"
create_dir = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
derive_partial_eq_without_eq = "warn"
disallowed_script_idents = "warn"
doc_link_with_quotes = "warn"
doc_markdown = "warn"
empty_enum = "warn"
empty_enum_variants_with_brackets = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
empty_structs_with_brackets = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
error_impl_error = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
fallible_impl_from = "warn"
filetype_is_file = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp = "warn"
float_cmp_const = "warn"
format_push_string = "warn"
from_iter_instead_of_collect = "warn"
if_not_else = "warn"
if_then_some_else_none = "warn"
ignored_unit_patterns = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inconsistent_struct_constructor = "warn"
index_slicing = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
integer_division = "warn"
items_after_statements = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_with_drain = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
manual_assert = "warn"
manual_instant_elapsed = "warn"
manual_is_variant_and = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
many_single_char_names = "warn"
map_unwrap_or = "warn"
match_bool = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
maybe_infinite_iter = "warn"
mem_forget = "warn"
mismatching_type_param_order = "warn"
missing_assert_message = "warn"
missing_const_for_fn = "warn"
missing_docs_in_private_items = "warn"
missing_errors_doc = "warn"
missing_fields_in_debug = "warn"
missing_panics_doc = "warn"
mixed_read_write_in_expression = "warn"
multiple_inherent_impl = "warn"
must_use_candidate = "warn"
mut_mut = "warn"
mutex_atomic = "warn"
mutex_integer = "warn"
needless_bitwise_bool = "warn"
needless_collect = "warn"
needless_continue = "warn"
needles_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_pass_by_value = "warn"
needless_raw_string_hashes = "warn"
needless_raw_strings = "warn"
negative_feature_names = "warn"
no_mangle_with_rust_abi = "warn"
non_send_fields_in_send_ty = "warn"
nonstandard_macro_braces = "warn"
option_as_ref_cloned = "warn"
option_if_let_else = "warn"
option_option = "warn"
or_fun_call = "warn"
path_buf_push_overwrite = "warn"
pub_underscore_fields = "warn"
range_minus_one = "warn"
range_plus_one = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
read_zero_byte_vec = "warn"
redundant_clone = "warn"
redundant_else = "warn"
redundant_feature_names = "warn"
redundant_pub_crate = "warn"
redundant_type_annotations = "warn"
ref_binding_to_reference = "warn"
ref_option_ref = "warn"
ref_patterns = "warn"
rest_pat_in_fully_bound_structs = "warn"
return_self_not_must_use = "warn"
same_functions_in_if_condition = "warn"
same_name_method = "warn"
self_named_module_files = "warn"
semicolon_if_nothing_returned = "warn"
semicolon_outside_block = "warn"
shadow_reuse = "warn"
shadow_same = "warn"
shadow_unrelated = "warn"
significant_drop_in_scrutinee = "warn"
significant_drop_tightening = "warn"
single_char_lifetime_names = "warn"
single_match_else = "warn"
stable_sort_primitive = "warn"
str_split_at_newline = "warn"
str_to_string = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_ptr_to_ptr = "warn"
transmute_undefined_repr = "warn"
trivially_copy_pass_by_ref = "warn"
try_err = "warn"
tuple_array_conversions = "warn"
type_repetition_in_bounds = "warn"
unchecked_duration_subtraction = "warn"
unimplemented = "warn"
uninhabited_references = "warn"
uninlined_format_args = "warn"
unnecessary_box_returns = "warn"
unnecessary_join = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unnecessary_struct_initialization = "warn"
unnecessary_wraps = "warn"
unneeded_field_pattern = "warn"
unnested_or_patterns = "warn"
unused_async = "warn"
unused_peekable = "warn"
unreadable_literal = "warn"
unused_rounding = "warn"
unused_self = "warn"
use_debug = "warn"
use_self = "warn"
used_underscore_binding = "warn"
useless_let_if_seq = "warn"
verbose_bit_mask = "warn"
verbose_file_reads = "warn"
wildcard_dependencies = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"
enum_variant_names = "allow"
option_map_unit_fn = "allow"
tabs_in_doc_comments = "allow"
type_complexity = "allow"
format_in_format_args = "allow"
format_collect = "allow"
