// The Cabin prelude. This is a set of globals that's prepended to every cabin file.

// Groups ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/// The "Group" group. This contains type information about a group, and all group variables have this type.
let Group = new Object {};

/// No value. This is used in return types of actions that do not return a value. This is different from `Nothing` because functions
/// that return `Nothing` must explicitly do so, whereas actions that return `Void` will do so implicitly.
let Void = new Object {};

let Function = group {};

let AnonymousTable = group {};

let Object = group {};

let This = group {};

/// The `Anything` group. This is a group that is automatically implemented by all other groups. A action can use this as an argument to take any type. Note that the value
/// given to the action can't have any fields accessed on it, since none are known, and it cannot be unsafely downcasted into another type. This is mostly used for 
/// compile-time parameters
let Anything = group {

	/// Returns whether this object is the same as the other object. This checks for reference equality, not value, so it will only return true
	/// if this object and the given argument literally point to the same data in memory.
	#[builtin("Anything.is")]
	is = action(other: This): Boolean
};

/// Indicates that a value is unknown at compile-time. This should *never* be used explicity; Rather, this
/// is inserted automatically at certain positions by the compiler. Specifically, Whenever an expression cannot
/// be entirely evaluated at compile-time, the expression returns `UnknownAtCompileTime` during compile-time
/// evaluation implicitly by the compiler.
#[cabin_only]
let Parameter = new Object {};

// Tags --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/// Indicates that a variable is only available in the Cabin standard library, and not to developers writing their own programs using Cabin. This is used on things that have no real use outside
/// of the Cabin standard library, like builtin action handling and system side effect handling.
#[cabin_only]
let cabin_only = new Object {};

/// A tag indicating that a action is built into the Cabin compiler.
#[cabin_only]
let BuiltinTag = group {
	internal_name: Text
};

/// Creates a new `BuiltinTag` with the given name.
#[cabin_only]
let builtin = action(builtin_name: Text): BuiltinTag {
	return new BuiltinTag {
		internal_name = builtin_name
	};
};

/// A tag indicating that a action has side effects on the system that can't be tracked by the language or the function's parameters. This is used for things like IO and file
/// operations. Functions marked with this will not be evaluated at compile-time when linting with `cabin check`. 
#[cabin_only]
let system_side_effects = new Object {};

/// A tag indicating that a action is preferred to be run at compile-time. This doesn't prevent the function from being run at compile-time, but will emit a warning if it is.
#[cabin_only]
let RuntimeOnlyTag = group {
	reason: Text
};

/// Creates a new runtime-only tag with the given reason.
#[cabin_only]
let runtime_only = action(reason: Text): RuntimeOnlyTag {
	return new RuntimeOnlyTag {
		reason = reason
	};
};

// Booleans ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let Boolean = either {
	true,
	false
};

let true = Boolean.true;
let false = Boolean.false;

// Strings ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let Text = group {
	// Internal string field //
};

// Numbers ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let Number = group {
	// Internal number field //
	
	to = action(this: Number, end: Number): List {
		// let list = [];
		// let current = this;
		// while current < end {
		// 	list.append(current);
		// 	current = current + 1;
		// };
	}
};

// Lists -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/// A list object, which can hold an arbitrary number of things.
let List = group<Element> {

	/// Adds a new element to the end of this list.
	append = action(this: List, element: Element): Void,

	/// Adds a new element to the beginning of this list.
	prepend = action(this: List, element: Element): Void,

	/// Returns the element from this list at the given index.
	get = action(this: List, index: Number): Element,

	/// Sets the element in this list at the given index.
	set = action(this: List, index: Number, value: Element): Void,

	/// Checks if the given value is in this list. This checks for value equality, not reference.
	contains = action(this: List, value: Element): Boolean {
		foreach element in this {
			if element == value {
				return true;
			};
		};

		return false;
	}
};

// System ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let system = new Object {

	#[runtime_only("
		The action system.get_environment_variable() will read the value of an environment variable. Using this value means that the
		resuling application will depend on user environment at compile-time, meaning the same program can be compiled to different
		binary executables depending on the user's environment. This can be confusing and cause unexpected behavior, so this action
		is recommended to only be called at runtime.
	")]
	/// Gets the value of an environment variable.
	get_environment_variable = action(name: Text): Text,

	/// Sets the value of an environment variable for this process. This is only valid in the current process and will not persist once
	/// the process ends. 
	set_environment_variable = action(name: Text, value: Text): Void
};

// IO ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/// The terminal object which gives access to stdin/stdout/stderr operations.
let terminal = new Object {

	/// Prints to the standard output stream. A newnline is automatically appended.
	#[system_side_effects, builtin("terminal.print")]
	print = action(text: Text): Void,

	// Prints to the standard error stream. A newline is automatically appended.
	#[system_side_effects, builtin("terminal.print_error")]
	print_error = action(text: Text): Void,

	/// Reads a line of user input from the terminal, and returns the result as text. The trailing newline is stripped.
	#[
		system_side_effects, 
		builtin("terminal.input"),
		runtime_only("
			The action terminal.input takes input from the user and returns the value as Text. Using this value means that the
			resuling application will depend on user input at compile-time, meaning the same program can be compiled to different
			binary executables depending on the user's input. This can be confusing and cause unexpected behavior, so this action
			is recommended to only be called at runtime.
		")
	]
	input = action: Text,

	/// Clears the terminal
	#[builtin("terminal.clear")]
	clear = action: Void
};

/// The file object, which gives access to file operations, such as reading files, writing files, and checking if files exist. Cabin has no
/// concept of a "file" object instance; You can simply read from and write to files actionally by path.
let files = new Object {

	/// Reads the contents of a file and returns the output as Text.
	#[
		builtin("File.read"),
		runtime_only("
			The action file.read reads a file from user and returns its contents as Text. Using this value means that the
			resuling application will depend on user environment at compile-time, meaning the same program can be compiled to different
			binary executables depending on the user's environment. This can be confusing and cause unexpected behavior, so this action
			is recommended to only be called at runtime.
		")
	]
	read = action(path: Text): Text,

	/// Writes Text to a file.
	#[builtin("File.write"), system_side_effects]
	write = action(path: Text, content: Text): Void,

	/// Checks whether a path exists and is a file (not a directory).
	#[builtin("File.file_exists")]
	file_exists = action(path: Text): Boolean,

	/// Check whether a path exists and is a directory (not a file).
	#[builtin("File.directory_exists")]
	directory_exists = action(path: Text): Boolean
};

// -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
